apiVersion: v1
kind: Template
labels:
  template: jenkins
metadata:
  annotations:
    description: CI/CD Jenkins component with pipeline for creating infra tools.
    iconClass: icon-jenkins
    tags: jenkins
  name: jenkins
objects:
- apiVersion: project.openshift.io/v1
  kind: Project
  metadata:
    annotations:
      openshift.io/description: ${PROJECT_DESCRIPTION}
      openshift.io/display-name: ${PROJECT_DISPLAYNAME}
    name: ${NAME_PREFIX}-${PROJECT_NAME}
  spec: {}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows all pods in this namespace to pull images from
        this namespace.  It is auto-managed by a controller; remove subjects to disable.
    name: system:image-pullers
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:image-puller
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts:${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows builds in this namespace to push images to
        this namespace.  It is auto-managed by a controller; remove subjects to disable.
    name: system:image-builders
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:image-builder
  subjects:
  - kind: ServiceAccount
    name: builder
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows deploymentconfigs in this namespace to rollout
        pods in this namespace.  It is auto-managed by a controller; remove subjects
        to disable.
    name: system:deployers
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:deployer
  subjects:
  - kind: ServiceAccount
    name: deployer
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: admin
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: admin
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: ${PROJECT_ADMIN_USER}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-maven-35-centos7
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: docker.io/openshift/jenkins-agent-maven-35-centos7:v3.11
      generation: 2
      importPolicy: {}
      name: v3.11
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-appdev
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-appdev
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: jenkins-agent-appdev:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM docker.io/openshift/jenkins-agent-maven-35-centos7:v3.11
        USER root
        RUN yum -y install skopeo && yum clean all
        USER 1001
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: jenkins-agent-maven-35-centos7:v3.11
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: cMSazflaIcOBAR9YFj_7
      type: GitHub
    - generic:
        secret: kJiaoYAnS4m_25RhrQgW
      type: Generic
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: jenkins-ephemeral
    name: jenkins
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    host: ${NAME_PREFIX}-jenkins.${APP_DOMAIN}
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      name: pipeline
    name: pipeline
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          #!groovy
          
          def source_git_repo       = 'https://github.com/elos-tech/openshift-cicd-infra.git'
          def app_pipeline_git_repo = 'https://github.com/elos-tech/openshift-cicd-app.git'
          def name_prefix        = 'cicd'
          def app_domain         = 'apps.oslab.elostech.cz'
          def jenkins_project    = "${name_prefix}-jenkins"
          def components_project = "${name_prefix}-components"
          def app_project_dev    = "${name_prefix}-tasks-dev"
          def app_project_prod   = "${name_prefix}-tasks-prod"
          
          node {
            stage('Cleanup') {
              delete_project(components_project)
              delete_project(app_project_dev)
              delete_project(app_project_prod)
            }
            
            stage('Checkout Source') {
              git source_git_repo
            }
          
            stage('Create Components Prerequisites') {
              // Change current project to default - existing project. If pipeline is executed
              // multiple times, oc can be still switched to old and non-existing project for
              // components.
              sh 'oc project default'
              sh 'oc process -f templates/components-project-template.yaml | oc create -f -'
              
              // Switch to components project if it exists. This is done for all oc commands
              // executed directly later in this pipeline.
              sh "oc project ${components_project}"
            }
          
            /*
            stage('Create Gogs') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('postgresql-persistent',
                    '--param POSTGRESQL_USER=gogs',
                    '--param POSTGRESQL_PASSWORD=gogs',
                    '--param POSTGRESQL_DATABASE=gogs',
                    '--param VOLUME_CAPACITY=4Gi',
                    '--param DATABASE_SERVICE_NAME=postgresql-gogs',
                    '--labels=app=postgresql_gogs')
          
                  sh """
                    sed -i 's@_GOGS_ROOT_URL_@http://${name_prefix}.${app_domain}@' artefacts/gogs-app.ini
                    cp artefacts/gogs-app.ini artefacts/app.ini
                    oc create configmap gogs-app-ini --from-file=artefacts/app.ini
                  """
                    
                  openshift.newApp('./templates/gogs-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                  
                  wait_for_pod('postgresql-gogs')
                  wait_for_pod('gogs')
                  
                  def gogs_pod_name = get_pod_name('gogs')
                  sh "oc rsync artefacts ${gogs_pod_name}:/tmp/"
                  sh "oc exec ${gogs_pod_name} -- /opt/gogs/gogs restore --from=/tmp/artefacts/gogs-backup.zip"
                }
              }
            }
            */
          
            stage('Create Nexus') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('./templates/nexus-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                    
                  wait_for_pod('nexus')
                  
                  def nexus_pod_name = get_pod_name('nexus')
                  sh "oc rsync artefacts ${nexus_pod_name}:/tmp/"
                  sh "oc exec ${nexus_pod_name} -- /tmp/artefacts/setup_nexus3.sh admin admin123 http://localhost:8081"
                }
              }
            }
            
            stage('Create Sonarqube') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('postgresql-persistent',
                    '--param POSTGRESQL_USER=sonar',
                    '--param POSTGRESQL_PASSWORD=sonar',
                    '--param POSTGRESQL_DATABASE=sonar',
                    '--param VOLUME_CAPACITY=4Gi',
                    '--param DATABASE_SERVICE_NAME=postgresql-sonarqube',
                    '--labels=app=sonarqube_db')
                  
                  openshift.newApp('./templates/sonarqube-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                }
              }
            }
          
            stage('Prepare dev application environment') {
              sh """
                oc process -f templates/tasks-app-environment-template.yaml \
                  -p NAME_PREFIX=${name_prefix} \
                  -p PROJECT_NAME=tasks-dev \
                  -p APP_DOMAIN=${app_domain}| oc create -f -
              """
            }
            
            stage('Prepare prod application environment') {
              sh """
                oc process -f templates/tasks-app-environment-template.yaml \
                  -p NAME_PREFIX=${name_prefix} \
                  -p PROJECT_NAME=tasks-prod \
                  -p APP_DOMAIN=${app_domain}| oc create -f -
              """
            }
            
            stage('Create application pipeline') {
              openshift.withCluster() {
                openshift.withProject(jenkins_project) {
                  sh """
                    oc get bc | grep '^openshift-cicd-app' || oc new-app ${app_pipeline_git_repo}
                  """
                  //openshift.newApp(app_pipeline_git_repo)
                }
              }
            }
          }
          
          def delete_project(project_name) {
            sh """
              oc delete project $project_name || echo
            """
          }
          
          def get_pod_name(app_name) {
            return sh (
              script: "oc get pod | grep '^$app_name' | awk '{ print \$1 }'",
              returnStdout: true
            ).trim()
          }
          
          def wait_for_pod(app_name) {
            timeout(5) {
              sh """
                while true; do
                  PODS_COUNT=\$(oc get rc | grep "^$app_name" | awk '{ print \$4 }')
                  [ "\$PODS_COUNT" -ge 1 ] && break
                  sleep 10
                done
              """
            }
          }

  type: JenkinsPipeline
parameters:
- name: NAME_PREFIX
  value: cicd
- name: APP_DOMAIN
  value: apps.oslab.elostech.cz
- name: PROJECT_NAME
  value: jenkins
- name: PROJECT_DISPLAYNAME
  value: CI/CD Jenkins
- name: PROJECT_DESCRIPTION
  value: CI/CD Jenkins
- name: PROJECT_ADMIN_USER
  value: admin
