apiVersion: v1
kind: Template
labels:
  template: jenkins
metadata:
  annotations:
    description: CI/CD Jenkins component with pipeline for creating infra tools.
    iconClass: icon-jenkins
    tags: jenkins
  name: jenkins
objects:
- apiVersion: project.openshift.io/v1
  kind: Project
  metadata:
    annotations:
      openshift.io/description: ${PROJECT_DESCRIPTION}
      openshift.io/display-name: ${PROJECT_DISPLAYNAME}
    name: ${NAME_PREFIX}-${PROJECT_NAME}
  spec: {}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows all pods in this namespace to pull images from
        this namespace.  It is auto-managed by a controller; remove subjects to disable.
    name: system:image-pullers
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:image-puller
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts:${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows builds in this namespace to push images to
        this namespace.  It is auto-managed by a controller; remove subjects to disable.
    name: system:image-builders
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:image-builder
  subjects:
  - kind: ServiceAccount
    name: builder
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      openshift.io/description: Allows deploymentconfigs in this namespace to rollout
        pods in this namespace.  It is auto-managed by a controller; remove subjects
        to disable.
    name: system:deployers
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:deployer
  subjects:
  - kind: ServiceAccount
    name: deployer
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: admin
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: admin
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: ${PROJECT_ADMIN_USER}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-maven-35-centos7
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: docker.io/openshift/jenkins-agent-maven-35-centos7:v3.11
      generation: 2
      importPolicy: {}
      name: v3.11
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-appdev
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: jenkins-agent-appdev
    name: jenkins-agent-appdev
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: jenkins-agent-appdev:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM docker.io/openshift/jenkins-agent-maven-35-centos7:v3.11
        USER root
        RUN yum -y install skopeo && yum clean all
        USER 1001
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: jenkins-agent-maven-35-centos7:v3.11
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: cMSazflaIcOBAR9YFj_7
      type: GitHub
    - generic:
        secret: kJiaoYAnS4m_25RhrQgW
      type: Generic
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: jenkins-ephemeral
    name: jenkins
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    host: ${NAME_PREFIX}-jenkins.${APP_DOMAIN}
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      name: infra-pipeline
    name: infra-pipeline
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          #!groovy
          
          def source_git_repo       = 'https://github.com/elos-tech/openshift-cicd-infra.git'
          def app_pipeline_git_repo = 'https://github.com/elos-tech/openshift-cicd-app.git'
          def name_prefix        = 'cicd'
          def app_domain         = 'apps.oslab.elostech.cz'
          def jenkins_project    = "${name_prefix}-jenkins"
          def components_project = "${name_prefix}-components"
          def app_project_dev    = "${name_prefix}-tasks-dev"
          def app_project_prod   = "${name_prefix}-tasks-prod"
          
          node {
            stage('Cleanup') {
              delete_project(components_project)
              delete_project(app_project_dev)
              delete_project(app_project_prod)
            }
            
            stage('Checkout Source') {
              git source_git_repo
            }
          
            stage('Create Components Prerequisites') {
              // Change current project to default - existing project. If pipeline is executed
              // multiple times, oc can be still switched to old and non-existing project for
              // components.
              sh 'oc project default'
              sh 'oc process -f templates/components-project-template.yaml | oc create -f -'
              
              // Switch to components project if it exists. This is done for all oc commands
              // executed directly later in this pipeline.
              sh "oc project ${components_project}"
            }
          
            /*
            stage('Create Gogs') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('postgresql-persistent',
                    '--param POSTGRESQL_USER=gogs',
                    '--param POSTGRESQL_PASSWORD=gogs',
                    '--param POSTGRESQL_DATABASE=gogs',
                    '--param VOLUME_CAPACITY=4Gi',
                    '--param DATABASE_SERVICE_NAME=postgresql-gogs',
                    '--labels=app=postgresql_gogs')
          
                  sh """
                    sed -i 's@_GOGS_ROOT_URL_@http://${name_prefix}.${app_domain}@' artefacts/gogs-app.ini
                    cp artefacts/gogs-app.ini artefacts/app.ini
                    oc create configmap gogs-app-ini --from-file=artefacts/app.ini
                  """
                    
                  openshift.newApp('./templates/gogs-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                  
                  wait_for_pod('postgresql-gogs')
                  wait_for_pod('gogs')
                  
                  def gogs_pod_name = get_pod_name('gogs')
                  sh "oc rsync artefacts ${gogs_pod_name}:/tmp/"
                  sh "oc exec ${gogs_pod_name} -- /opt/gogs/gogs restore --from=/tmp/artefacts/gogs-backup.zip"
                }
              }
            }
            */
          
            stage('Create Nexus') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('./templates/nexus-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                    
                  wait_for_pod('nexus')
                  
                  def nexus_pod_name = get_pod_name('nexus')
                  sh "oc rsync artefacts ${nexus_pod_name}:/tmp/"
                  sh "oc exec ${nexus_pod_name} -- /tmp/artefacts/setup_nexus3.sh admin admin123 http://localhost:8081"
                }
              }
            }
            
            stage('Create Sonarqube') {
              openshift.withCluster() {
                openshift.withProject(components_project) {
                  openshift.newApp('postgresql-persistent',
                    '--param POSTGRESQL_USER=sonar',
                    '--param POSTGRESQL_PASSWORD=sonar',
                    '--param POSTGRESQL_DATABASE=sonar',
                    '--param VOLUME_CAPACITY=4Gi',
                    '--param DATABASE_SERVICE_NAME=postgresql-sonarqube',
                    '--labels=app=sonarqube_db')
                  
                  openshift.newApp('./templates/sonarqube-template.yaml',
                    "--param NAME_PREFIX=${name_prefix}",
                    "--param APP_DOMAIN=${app_domain}")
                }
              }
            }
          
            stage('Prepare dev application environment') {
              sh """
                oc process -f templates/tasks-dev-project-template.yaml \
                  -p NAME_PREFIX=${name_prefix} \
                  -p PROJECT_NAME=tasks-dev \
                  -p APP_DOMAIN=${app_domain}| oc create -f -
              """
            }
            
            stage('Prepare prod application environment') {
              sh """
                oc process -f templates/tasks-prod-project-template.yaml \
                  -p NAME_PREFIX=${name_prefix} \
                  -p PROJECT_NAME=tasks-prod \
                  -p APP_DOMAIN=${app_domain}| oc create -f -
              """
            }
            
            /*
            stage('Create application pipeline') {
              openshift.withCluster() {
                openshift.withProject(jenkins_project) {
                  sh """
                    oc get bc | grep '^openshift-cicd-app' || oc new-app ${app_pipeline_git_repo}
                  """
                  //openshift.newApp(app_pipeline_git_repo)
                }
              }
            }
            */
          }
          
          def delete_project(project_name) {
            sh """
              oc delete project $project_name || echo
            """
          }
          
          def get_pod_name(app_name) {
            return sh (
              script: "oc get pod | grep '^$app_name' | awk '{ print \$1 }'",
              returnStdout: true
            ).trim()
          }
          
          def wait_for_pod(app_name) {
            timeout(5) {
              sh """
                while true; do
                  PODS_COUNT=\$(oc get rc | grep "^$app_name" | awk '{ print \$4 }')
                  [ "\$PODS_COUNT" -ge 1 ] && break
                  sleep 10
                done
              """
            }
          }

  type: JenkinsPipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      name: app-pipeline
    name: app-pipeline
    namespace: ${NAME_PREFIX}-${PROJECT_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          #!groovy
          
          // Run this pipeline on the custom Maven Slave ('maven')
          // Maven Slaves have JDK and Maven installed.
          
          def app_git_repo       = 'https://github.com/elos-tech/openshift-cicd-app.git'
          def name_prefix        = 'cicd'
          def components_project = "${name_prefix}-components"
          def app_project_dev    = "${name_prefix}-tasks-dev"
          def app_project_prod   = "${name_prefix}-tasks-prod"
          
          podTemplate(
            label: "maven-pod",
            cloud: "openshift",
            containers: [
              containerTemplate(
                name: "jnlp",
                workingDir: '/tmp',
                image: "docker-registry.default.svc:5000/${name_prefix}-jenkins/jenkins-agent-appdev"
              )
            ]
          ) {
            node('maven-pod') {
          
              // Define Maven Command. Make sure it points to the correct
              // settings for our Nexus installation (use the service to
              // bypass the router). The file nexus_openshift_settings.xml
              // needs to be in the Source Code repository.
              def mvnCmd = "mvn -s ./nexus_openshift_settings.xml"
          
              // Checkout Source Code
              stage('Checkout Source') {
                git app_git_repo
              }
          
              // The following variables need to be defined at the top level
              // and not inside the scope of a stage - otherwise they would not
              // be accessible from other stages.
              // Extract version and other properties from the pom.xml
              def groupId    = getGroupIdFromPom("pom.xml")
              def artifactId = getArtifactIdFromPom("pom.xml")
              def version    = getVersionFromPom("pom.xml")
            
              // Set the tag for the development image: version + build number
              def devTag  = "${version}-${BUILD_NUMBER}"
              // Set the tag for the production image: version
              def prodTag = "${version}"
            
              // Using Maven build the war file
              // Do not run tests in this step
              stage('Build war') {
                echo "Building version ${version}"
              
                sh "${mvnCmd} clean package -DskipTests"
              }
            
              // Using Maven run the unit tests
              stage('Unit Tests') {
                echo "Running Unit Tests"
                sh "${mvnCmd} test"
              }
            
              // Using Maven call SonarQube for Code Analysis
              stage('Code Analysis') {
                echo "Running Code Analysis"
              
                sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.${components_project}.svc:9000 -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
              }
            
              // Publish the built war file to Nexus
              stage('Publish to Nexus') {
                echo "Publish to Nexus"
              
                sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${component_project}.svc:8081/repository/releases"
              }
            
              // Build the OpenShift Image in OpenShift and tag it.
              stage('Build and Tag OpenShift Image') {
                echo "Building OpenShift container image tasks:${devTag}"
             
                // Use the file you just published into Nexus:
                sh "oc start-build tasks --follow --from-file=http://nexus3.${component_project}.svc:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war -n ${app_project_dev}"
            
                // Tag the image using the devTag
                openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: "$app_project_dev", namespace: "$app_project_dev", srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
              }
            
              // Copy Image to Nexus Docker Registry
              stage('Copy Image to Nexus Docker Registry') {
                echo "Copy image to Nexus Docker Registry"
            
                sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${app_project_dev}/tasks:${devTag} docker://nexus-registry.${components_project}.svc.cluster.local:5000/tasks:${devTag}"
              
                openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: "$app_project_dev", namespace: "$app_project_dev", srcStream: 'tasks', srcTag: devTag, verbose: 'false'
              }
            
              // Deploy the built image to the Development Environment.
              stage('Deploy to Dev') {
                echo "Deploying container image to Development Project"
                // Update the Image on the Development Deployment Config
                sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${app_project_dev}/tasks:${devTag} -n ${app_project_dev}"
            
                // Update the Config Map which contains the users for the Tasks application
                sh "oc delete configmap tasks-config -n $app_project_dev --ignore-not-found=true"
                sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${app_project_dev}"
            
                // Deploy the development application.
                openshiftDeploy depCfg: 'tasks', namespace: "$app_project_dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyDeployment depCfg: 'tasks', namespace: "$app_project_dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyService namespace: "$app_project_dev", svcName: 'tasks', verbose: 'false'
              }
            
              // Run Integration Tests in the Development Environment.
              stage('Integration Tests') {
                echo "Running Integration Tests"
                sleep 30
            
                // Create a new task called "integration_test_1"
                echo "Creating task"
                sh "curl -i -f -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.${app_project_dev}.svc:8080/ws/tasks/integration_test_1"
            
                // Retrieve task with id "1"
                echo "Retrieving tasks"
                sh "curl -i -f -u 'tasks:redhat1' -H 'Content-Length: 0' -X GET http://tasks.${app_project_dev}.svc:8080/ws/tasks/1"
            
                // Delete task with id "1"
                echo "Deleting tasks"
                sh "curl -i -f -u 'tasks:redhat1' -H 'Content-Length: 0' -X DELETE http://tasks.${app_project_dev}.svc:8080/ws/tasks/1"
              }
          
              // Blue/Green Deployment into Production
              // Do not activate the new version yet.
              def destApp   = "tasks-green"
              def activeApp = ""
             
              stage('Blue/Green Production Deployment') {
                // Replace xyz-tasks-dev and xyz-tasks-prod with
                // your project names
                activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${app_project_prod} -o jsonpath='{ .spec.to.name }'").trim()
              
                if (activeApp == "tasks-green") {
                  destApp = "tasks-blue"
                }
              
                echo "Active Application:      " + activeApp
                echo "Destination Application: " + destApp
              
                // Update the Image on the Production Deployment Config
                sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${app_project_dev}/tasks:${prodTag} -n ${app_project_prod}"
              
                // Update the Config Map which contains the users for the Tasks application
                sh "oc delete configmap ${destApp}-config -n ${app_project_prod} --ignore-not-found=true"
                sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${app_project_prod}"
              
                // Deploy the inactive application.
                // Replace xyz-tasks-prod with the name of your production project
                openshiftDeploy depCfg: destApp, namespace: "${app_project_prod}", verbose: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyDeployment depCfg: destApp, namespace: "${app_project_prod}", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
                openshiftVerifyService namespace: "${app_project_prod}", svcName: destApp, verbose: 'false'
              }
              
              // Switch stage (user input):
              stage('Switch over to new Version') {
                input "Switch Production?"
              
                echo "Switching Production application to ${destApp}."
              
                // Replace xyz-tasks-prod with the name of your production project
                sh 'oc patch route tasks -n ' + app_project_prod + ' -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
              }
            }
          }
          
          // Convenience Functions to read variables from the pom.xml
          // Do not change anything below this line.
          // --------------------------------------------------------
          def getVersionFromPom(pom) {
            def matcher = readFile(pom) =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
          
          def getGroupIdFromPom(pom) {
            def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
            matcher ? matcher[0][1] : null
          }
          
          def getArtifactIdFromPom(pom) {
            def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
            matcher ? matcher[0][1] : null
          }

  type: JenkinsPipeline
parameters:
- name: NAME_PREFIX
  value: cicd
- name: APP_DOMAIN
  value: apps.oslab.elostech.cz
- name: PROJECT_NAME
  value: jenkins
- name: PROJECT_DISPLAYNAME
  value: CI/CD Jenkins
- name: PROJECT_DESCRIPTION
  value: CI/CD Jenkins
- name: PROJECT_ADMIN_USER
  value: admin
